	(
		(#)
		(# shallow rules)
		(#)

		(# prep + np)
		(
			( ((type word) (pos prep) (case $case))   ((type shackle))   ((type word) (pos n) (case $case)) )
			( $3 ((prep $1) (has_prep 1)) )
		)
		
		(# prep + pron-pers)
		(
			( ((type word) (pos prep) (case $case))   ((type shackle))   ((type word) (pos pron) (prontype pers) (case $case)) )
			( $3 ((prep $1) (has_prep 1)) )
		)
		
		(# pomocí + np-gen)
		(
			( ((type word) (form pomocí) (att-gen nil) (att nil) (prep nil) (det nil) (coord nil) (conj nil))   ((type shackle))
				((type word) (pos n) (case gen)) )
			( $3 ((prep $1)) )
		)
		
		(# dle + np-gen)
		(
			( ((type word) (lemma dle))   ((type shackle))   ((type word) (pos n) (case gen)) )
			( $3 ((prep $1)) )
		)
		
		(# adv + a)
		(
			( ((type word) (pos adv))   ((type shackle))   ((type word) (pos a)) )
			( $3 ((prep $1)) )
		)
		
		(# pron + np)
		(
			( ((type word) (pos pron) (case $case) (gender $gender) (number $number))   ((type shackle))
				((type word) (pos n) (case $case) (gender $gender) (number $number)) )
			( $3 ((det $1)) )
		)
		
		(# a + np)
		(
			( ((type word) (pos a) (case $case) (gender $gender) (number $number))   ((type shackle))
				((type word) (pos n) (case $case) (gender $gender) (number $number)) )
			( $3 ((att $1)) )
		)
		
		
		(
			(	((type word) (pos a) (case $case) (gender $gender) (number $number))   ((type shackle))
				((type word) (pos conj) (lemma a-1))   ((type shackle))
				((type word) (pos a) (case $case) (gender $gender) (number $number))
			)
			( $5 ((coord $1) (conj $3)) )
		)
		
		(
			(	((type word) (pos n) (case $case))   ((type shackle))
				((type word) (pos conj) (lemma a-1))   ((type shackle))
				((type word) (pos n) (case $case))
			)
			( $5 ((coord $1) (conj $3)) )
		)
		
		(# np + np-gen)
		(
			( ((type word) (pos n))   ((type shackle))   ((type word) (pos n) (case gen) (att-gen nil)) )
			( $1 ((att-gen $3)) )
		)
	)
